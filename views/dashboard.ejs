<%- include('partials/header') %>
<h2>Dashboard</h2>
<% if (error && error !== 'null') { %>
  <div class="alert alert-danger"><%= error %></div>
<% } %>
<div class="mb-3">
  <form action="/dashboard" method="GET">
    <label for="filter" class="form-label">Filter Analytics:</label>
    <select name="filter" id="filter" class="form-select d-inline w-auto" onchange="this.form.submit()">
      <option value="today" <%= filter === 'today' ? 'selected' : '' %>>Today</option>
      <option value="weekly" <%= filter === 'weekly' ? 'selected' : '' %>>Weekly</option>
      <option value="monthly" <%= filter === 'monthly' ? 'selected' : '' %>>Monthly</option>
    </select>
  </form>
  <button class="btn btn-secondary mt-2" onclick="refreshDashboardStats()">Refresh Stats</button>
</div>
<div class="row">
  <div class="col-md-6">
    <div class="card">
      <div class="card-body">
        <h5 class="card-title">Vehicles and Earnings Over Time</h5>
        <canvas id="vehiclesEarningsChart"></canvas>
      </div>
    </div>
  </div>
  <div class="col-md-6">
    <div class="card">
      <div class="card-body">
        <h5 class="card-title">Current Space Usage</h5>
        <canvas id="spaceChart"></canvas>
      </div>
    </div>
  </div>
</div>
<div class="row mt-4">
  <div class="col-md-3">
    <div class="card">
      <div class="card-body">
        <h5 class="card-title">Today's Vehicles</h5>
        <p class="card-text" id="vehicles"><%= vehicles %></p>
      </div>
    </div>
  </div>
  <div class="col-md-3">
    <div class="card">
      <div class="card-body">
        <h5 class="card-title">Earnings</h5>
        <p class="card-text" id="earnings">$<%= earnings.toFixed(2) %></p>
      </div>
    </div>
  </div>
  <div class="col-md-3">
    <div class="card">
      <div class="card-body">
        <h5 class="card-title">Platform Fee (5%)</h5>
        <p class="card-text" id="platformFee">$<%= platformFee.toFixed(2) %></p>
      </div>
    </div>
  </div>
  <div class="col-md-3">
    <div class="card">
      <div class="card-body">
        <h5 class="card-title">Available Spaces</h5>
        <p class="card-text" id="available"><%= available %></p>
      </div>
    </div>
  </div>
  <div class="col-md-3">
    <div class="card">
      <div class="card-body">
        <h5 class="card-title">Parked Spaces</h5>
        <p class="card-text" id="parked"><%= parked %></p>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js?t=<%= Date.now() %>"></script>
<script>
// Log initial client-side data
console.log('Initial client-side dashboard stats:', {
  parked: <%= parked %>,
  earnings: <%= earnings %>,
  available: <%= available %>
});

// Destroy existing charts if they exist
if (window.vehiclesEarningsChart) {
  window.vehiclesEarningsChart.destroy();
}
if (window.spaceChart) {
  window.spaceChart.destroy();
}

// Initialize charts
const ctx1 = document.getElementById('vehiclesEarningsChart').getContext('2d');
window.vehiclesEarningsChart = new Chart(ctx1, {
  type: 'line',
  data: {
    labels: <%- JSON.stringify(chartLabels) %>,
    datasets: [
      {
        label: 'Vehicles',
        data: <%- JSON.stringify(vehicleData) %>,
        borderColor: 'rgba(75, 192, 192, 1)',
        backgroundColor: 'rgba(75, 192, 192, 0.2)',
        fill: false
      },
      {
        label: 'Earnings ($)',
        data: <%- JSON.stringify(earningsData) %>,
        borderColor: 'rgba(255, 99, 132, 1)',
        backgroundColor: 'rgba(255, 99, 132, 0.2)',
        fill: false
      }
    ]
  },
  options: {
    responsive: true,
    scales: {
      y: {
        beginAtZero: true,
        title: {
          display: true,
          text: 'Count / Earnings ($)'
        }
      },
      x: {
        title: {
          display: true,
          text: 'Date'
        }
      }
    }
  }
});

const ctx2 = document.getElementById('spaceChart').getContext('2d');
window.spaceChart = new Chart(ctx2, {
  type: 'bar',
  data: {
    labels: ['Available Spaces', 'Parked Spaces'],
    datasets: [{
      label: 'Spaces',
      data: [<%= available %>, <%= parked %>],
      backgroundColor: [
        'rgba(54, 162, 235, 0.2)',
        'rgba(255, 206, 86, 0.2)'
      ],
      borderColor: [
        'rgba(54, 162, 235, 1)',
        'rgba(255, 206, 86, 1)'
      ],
      borderWidth: 1
    }]
  },
  options: {
    responsive: true,
    scales: {
      y: {
        beginAtZero: true,
        title: {
          display: true,
          text: 'Number of Spaces'
        }
      }
    }
  }
});

// Function to fetch and update dashboard stats
function refreshDashboardStats() {
  fetch('/dashboard?t=' + Date.now(), { cache: 'no-store' })
    .then(response => response.text())
    .then(html => {
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      
      // Update raw stats
      document.getElementById('vehicles').textContent = doc.querySelector('#vehicles').textContent;
      document.getElementById('earnings').textContent = doc.querySelector('#earnings').textContent;
      document.getElementById('platformFee').textContent = doc.querySelector('#platformFee').textContent;
      document.getElementById('available').textContent = doc.querySelector('#available').textContent;
      document.getElementById('parked').textContent = doc.querySelector('#parked').textContent;

      // Extract new chart data from the HTML
      const newChartLabels = JSON.parse(doc.querySelector('#chartLabelsData').textContent);
      const newVehicleData = JSON.parse(doc.querySelector('#vehicleData').textContent);
      const newEarningsData = JSON.parse(doc.querySelector('#earningsData').textContent);
      const newAvailable = parseInt(doc.querySelector('#available').textContent);
      const newParked = parseInt(doc.querySelector('#parked').textContent);

      // Update charts
      window.vehiclesEarningsChart.data.labels = newChartLabels;
      window.vehiclesEarningsChart.data.datasets[0].data = newVehicleData;
      window.vehiclesEarningsChart.data.datasets[1].data = newEarningsData;
      window.vehiclesEarningsChart.update();

      window.spaceChart.data.datasets[0].data = [newAvailable, newParked];
      window.spaceChart.update();

      console.log('Dashboard stats updated:', {
        parked: newParked,
        earnings: parseFloat(doc.querySelector('#earnings').textContent.replace('$', '')),
        available: newAvailable
      });
    })
    .catch(err => console.error('Failed to refresh dashboard stats:', err));
}

// Force full refresh if hardrefresh parameter is present
if ('<%= hardRefresh %>' !== 'null') {
  console.log('Hard refresh detected, forcing full reload...');
  window.location.reload(true);
} else if (window.location.search.includes('t=')) {
  console.log('Detected redirect from exit, refreshing stats...');
  setTimeout(refreshDashboardStats, 500);
}
</script>
<!-- Hidden elements to store chart data for refresh -->
<script id="chartLabelsData" type="application/json"><%- JSON.stringify(chartLabels) %></script>
<script id="vehicleData" type="application/json"><%- JSON.stringify(vehicleData) %></script>
<script id="earningsData" type="application/json"><%- JSON.stringify(earningsData) %></script>
<%- include('partials/footer') %>